- # Arguments: form, method, fields, &block
- #   form: The parent form
- #   method: Method to access the object's array
- #   fields: {
- #     field_name: { // field_name can be whatever method of the objects in the array
- #       type: input type (supported: 'select') // compulsory
- #       encapsulating_element: {  // optional
- #         class: 'col-xs-3' // Whatever class for the encapsulating element
- #       }
- #     }
- #   }
- #  &block: The block will be appended at the end of the panel
- object = form.object
- object_name = form.object_name
- association_info = object.class.reflect_on_association(method)
- association_name = association_info.class_name.underscore
.panel.panel-default
  .panel-heading= t("activerecord.attributes.#{object.model_name.param_key}.#{association_info.plural_name}")
  .panel-body.form-horizontal
    = hidden_field object_name, "#{association_info.plural_name}_attributes[]"
    = form.fields_for association_info.plural_name do |ff|
      - # The following input allows to at least initialize an empty array
      = ff.hidden_field :id
      - fields.each do |field_name, field_type|
        - # These hidden fields will initialize the Vue values
        = ff.hidden_field field_name
    = render 'nested_form', object_name: object_name,
                            association_name: association_name,
                            association_info: association_info,
                            fields: fields do
      .col-xs-1
        %label &nbsp;
        %button.btn.btn-danger.btn-xs{'v-on:click.prevent': "delete_#{association_name}(#{association_name})"} X
    %button.btn.btn-default{'v-on:click.prevent': "add_#{association_name}()"}= t('helpers.add')
    = yield
